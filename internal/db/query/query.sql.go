// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package query

import (
	"context"
	"database/sql"
	"time"
)

const getUser = `-- name: GetUser :one
SELECT user_id, signup_date, last_signin_date, signin_locked, signin_locked_date, is_admin, email, full_name, business_category, department_number
FROM users
WHERE user_id = ?
`

func (q *Queries) GetUser(ctx context.Context, userID uint32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.SignupDate,
		&i.LastSigninDate,
		&i.SigninLocked,
		&i.SigninLockedDate,
		&i.IsAdmin,
		&i.Email,
		&i.FullName,
		&i.BusinessCategory,
		&i.DepartmentNumber,
	)
	return i, err
}

const getUserWithEmail = `-- name: GetUserWithEmail :one
SELECT user_id, signup_date, last_signin_date, signin_locked, signin_locked_date, is_admin, email, full_name, business_category, department_number
FROM users
WHERE email = ?
`

func (q *Queries) GetUserWithEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserWithEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.SignupDate,
		&i.LastSigninDate,
		&i.SigninLocked,
		&i.SigninLockedDate,
		&i.IsAdmin,
		&i.Email,
		&i.FullName,
		&i.BusinessCategory,
		&i.DepartmentNumber,
	)
	return i, err
}

const getUserWithSession = `-- name: GetUserWithSession :one
SELECT u.user_id, u.signup_date, u.last_signin_date, u.signin_locked, u.signin_locked_date, u.is_admin, u.email, u.full_name, u.business_category, u.department_number, s.session_id, s.user_id, s.creation_date, s.session_token, s.user_agent, s.ip_address
FROM users u
JOIN sessions s
ON s.user_id = u.user_id
WHERE s.session_token = ?
`

type GetUserWithSessionRow struct {
	UserID           uint32
	SignupDate       time.Time
	LastSigninDate   sql.NullTime
	SigninLocked     bool
	SigninLockedDate sql.NullTime
	IsAdmin          bool
	Email            string
	FullName         string
	BusinessCategory string
	DepartmentNumber string
	SessionID        uint32
	UserID_2         uint32
	CreationDate     time.Time
	SessionToken     string
	UserAgent        string
	IpAddress        string
}

func (q *Queries) GetUserWithSession(ctx context.Context, sessionToken string) (GetUserWithSessionRow, error) {
	row := q.db.QueryRowContext(ctx, getUserWithSession, sessionToken)
	var i GetUserWithSessionRow
	err := row.Scan(
		&i.UserID,
		&i.SignupDate,
		&i.LastSigninDate,
		&i.SigninLocked,
		&i.SigninLockedDate,
		&i.IsAdmin,
		&i.Email,
		&i.FullName,
		&i.BusinessCategory,
		&i.DepartmentNumber,
		&i.SessionID,
		&i.UserID_2,
		&i.CreationDate,
		&i.SessionToken,
		&i.UserAgent,
		&i.IpAddress,
	)
	return i, err
}
